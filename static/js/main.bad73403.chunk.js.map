{"version":3,"sources":["components/Tasks/TasksPages.js","actions/index.js","App.js","reportWebVitals.js","reducers/todoReducer.js","reducers/index.js","store.js","index.js"],"names":["TasksPages","useState","cardForm","setcardForm","Date","date","setDate","titel","setTitel","setDescription","timeValue","minTime","maxTime","list","useSelector","state","todoReducers","dispatch","useDispatch","className","style","alignItems","backgroundColor","width","onClick","type","onChange","e","target","value","selected","min","max","format","step","onchange","data","payload","id","getTime","toString","marginTop","map","elem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialData","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bad73403.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './App.css';\r\nimport { TimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\r\nimport { addTodo, deleteTodo } from '../../actions/index';\r\nimport {useSelector, useDispatch } from \"react-redux\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\n\r\nfunction TasksPages() {\r\n    const [cardForm, setcardForm] = useState(false)\r\n    const [date, setDate] = useState(new Date());\r\n    const [titel, setTitel] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const timeValue: Date = new Date(\"01/01/2021 00:00 AM\");\r\n    const minTime: Date = new Date(\"01/02/2021 01:00 AM\");\r\n    const maxTime: Date = new Date(\"01/02/2021 05:00 AM\");\r\n    const list = useSelector((state)=> state.todoReducers.list);\r\n    const dispatch = useDispatch();\r\n  \r\n    const formToggle = () =>{\r\n        setcardForm(!cardForm)\r\n    }\r\n    const onchangeDate = date =>{\r\n        setDate(date) \r\n    }\r\n\r\n    const onChangeTitle = (e) =>{\r\n        setTitel(e.target.value)\r\n    }\r\n    const onDescriptionChange = (e) => {\r\n        setDescription(e.target.value)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container my-5 App\" style={{alignItems: \"center\"}}>\r\n            <div className=\"jumbotron py-3\" style={{backgroundColor: \"LightGray\", width: \"50%\"}}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-10\">\r\n                        <h2 className=\"display-10 text-upperCase\">\r\n                            TASk\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <button className=\"btn btn-success m-1 text-center\" onClick={formToggle}>+</button>\r\n                    </div>\r\n                </div>\r\n                {/* inputs from */}\r\n                {cardForm && (\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                    <div>Task Description</div>\r\n                        <textarea type=\"text\"\r\n                            className=\"form-control\"\r\n                            onChange={onDescriptionChange}\r\n                        >\r\n                        </textarea>\r\n                    </div>\r\n                    <div>Date</div>\r\n                    <div>\r\n                        <DatePicker selected={date} onChange={onchangeDate}/>\r\n                       <div>\r\n                       <div>Time</div>\r\n                        <TimePickerComponent \r\n                        value={timeValue}\r\n                        min={minTime}\r\n                        max={maxTime}\r\n                        format=\"HH.mm\"\r\n                        step={60}\r\n                      \r\n                        ></TimePickerComponent>\r\n                       </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <div>Assign User</div>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            onChange={onChangeTitle}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                    onchange={() => dispatch(addTodo(titel, description), setTitel(''), setDescription(''))}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n                )}\r\n            </div>\r\n            <div className=\"row d-flex justify-content-center position-relative\" style={{backgroundColor: \"LightGray\", width: \"50%\", marginTop: \"20px\", alignItems: \"center\"}}>\r\n                {\r\n                    list.map((elem)=> {\r\n                        return(\r\n                        <div key={elem.id}>\r\n                          <h3>{elem.data}</h3>\r\n                          <FaTrash  onchange={() => dispatch(deleteTodo(elem.id), setTitel(''))} />\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TasksPages\r\n","export const addTodo = (data) =>{\r\n    return{\r\n        type: \"ADD_TODO\",\r\n        payload:{\r\n            id: new Date().getTime().toString(),\r\n            data:data\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteTodo = () => {\r\n    return{\r\n        type: \"DELETE_TODO\"\r\n    }\r\n}\r\nexport const removeTodo = () => {\r\n    return{\r\n        type: \"REMOVE_TODO\"\r\n    }\r\n}","import React from 'react';\nimport TasksPages from './components/Tasks/TasksPages';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nfunction App() {\n\n \n  return (\n    <>\n      <TasksPages />\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialData= {\r\n    list: []\r\n}\r\n\r\nconst todoReducers = (state=initialData, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            const {id,data} = action.payload;\r\n            return{\r\n                ...state,\r\n                list: [\r\n                    ...state.list,\r\n                    {\r\n                        id:id,\r\n                        data:data\r\n                    }\r\n                ]\r\n            }\r\n            default: return state;\r\n    }\r\n\r\n}\r\nexport default todoReducers;","import todoReducers from \"./todoReducer\";\r\nimport { combineReducers } from \"redux\";\r\nconst rootReducer = combineReducers({\r\n    todoReducers\r\n})\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\nconst store = createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { createStore } from 'redux'; \n// import tasks from \"./reducers\"\nimport { Provider } from 'react-redux';\nimport store from \"./store\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n     <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}